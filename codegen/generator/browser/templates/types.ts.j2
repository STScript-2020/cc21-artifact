// Types.ts

import React from 'react';

export type MaybePromise<T> = T | Promise<T>;
export type FromPromise<T> = T extends MaybePromise<infer Payload> ? Payload : unknown;

type FunctionPropertyNames<T> = {
  [K in keyof T]: T[K] extends Function | undefined ? K : never;
}[keyof T];

type FunctionProperties<T> = Pick<T, FunctionPropertyNames<T>>;

export type DOMEvents = FunctionProperties<React.DOMAttributes<any>>

export type FunctionArguments<T> = T extends (...args: infer R) => infer _ ? R : never;

export type Constructor<T> = new (...args: any[]) => T;
export type EventHandler<Payload, K extends keyof DOMEvents> = (event: FunctionArguments<DOMEvents[K]>) => MaybePromise<Payload>;